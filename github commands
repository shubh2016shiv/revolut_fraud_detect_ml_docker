### BELOW GITHUB COMMANDS PUSHES THE EXISTING LOCAL REPOSITORY TO GITHUB REPOSITORY ###

Pre-Requisite: Create the GitHub repository and copy the GitHub URL

git add .
git commit -m "<whatever commit message>"
git remote add origin <GitHub URL>
git push -u -f origin <BRANCH NAME, most probably "master">

In case it shows any error, add the username using below:
git config --login user.name <GitHub User Name>

It will ask for authentication and it will be pushed

### PUSH THE CHANGES MADE LOCALLY ###
git push origin <BRANCH NAME ON WHICH CODE REPO EXISTS>

If code is changed from somewhere else, then add the remote origin in local github repository first
git remote add origin <GitHub URL>

### FETCH AND PULL ###
# Following commands takes the latest code changes from the github repo
git fetch origin   # Remember, the origin (git url has to be added fom line 7)
git pull

### REVERTING CODE TO PREVIOUS COMMIT ###
## REFERENCE: https://medium.com/swlh/using-git-how-to-go-back-to-a-previous-commit-8579ccc8180f
git log --oneline ## To get the commit IDs where we want to go back
git checkout <commit-id> .  ## DO NOT FORGET '.' AT THE END ## Go back using the git checkout, just like switching to the branch
$ git add .
$ git commit -m "Reverting to <commit-id>"
$ git push

### GET THE NAME OF THE FILES COMMITED PREVIOUSLY ###
git show --name-only --oneline <commit_hash>

### UNCOMMIT FILE IN PREVIOUS COMMIT ###
git reset HEAD^ <file_path>

### REVERT CHANGES IN SPECIFIC FILE ###
git checkout <commit-hash> -- <file-path>

### CREATE A NEW BRANCH AND PUSH DIFFERENT CODE IN NEW BRANCH WITHOUT EXTENDING THE MASTER ###
git init
git remote add origin <REMOTE REPO NAME>
git config --global user.name "<USERNAME>"
git config --global user.email "<EMAIL>"
git checkout -b <NEW BRANCH NAME>
git add .
git commit -m "<COMMIT MESSAGE>"
git push origin <NEW BRANCH NAME>

### SHOW ORIGIN ###
git remote show origin
